{
  "version": 3,
  "sources": [
    "components/SongCard/SongCard.js",
    "../node_modules/@material-ui/icons/esm/QueueMusic.js",
    "../node_modules/@material-ui/icons/esm/Done.js",
    "components/Home/home.js",
    "../node_modules/@material-ui/icons/esm/OpenInNew.js",
    "components/SongCard2/SongCard2.lazy.js",
    "components/Discover/Discover.js"
  ],
  "names": [
    "SongCard",
    "song",
    "props",
    "className",
    "disableRipple",
    "style",
    "width",
    "backgroundColor",
    "elevation",
    "component",
    "alt",
    "snippet",
    "title",
    "height",
    "onError",
    "e",
    "target",
    "onerror",
    "src",
    "image",
    "thumbnails",
    "high",
    "url",
    "loading",
    "hidden",
    "playlist",
    "position",
    "opacity",
    "top",
    "display",
    "color",
    "bottom",
    "right",
    "marginLeft",
    "gutterBottom",
    "variant",
    "primary",
    "secondary",
    "channelTitle",
    "defaultProps",
    "React",
    "memo",
    "createSvgIcon",
    "createElement",
    "d",
    "ArtistsSlider",
    "useState",
    "state",
    "setState",
    "token",
    "useContext",
    "AccountContext",
    "useEffect",
    "comlinkWorker",
    "fetch",
    "endPoints",
    "getFeedArtists",
    "headers",
    "Authorization",
    "then",
    "items",
    "borderLeft",
    "borderRadius",
    "borderRight",
    "map",
    "artist",
    "index",
    "in",
    "key",
    "Link",
    "to",
    "id",
    "avatar",
    "name",
    "charAt",
    "label",
    "clickable",
    "deleteIcon",
    "FeedSection",
    "response",
    "showTitle",
    "PlaySong",
    "PlayContext",
    "Fragment",
    "length",
    "maxWidth",
    "video",
    "onClick",
    "useProxy",
    "playList",
    "list",
    "ErrorComponent",
    "error",
    "left",
    "transform",
    "getSearchFeedFromAPI",
    "Recommendations",
    "topSearched",
    "HomeComponent",
    "tv",
    "isTvContext",
    "setError",
    "online",
    "useNetwork",
    "loadSections",
    "t",
    "a",
    "topArtist",
    "DebugLog",
    "init",
    "localStorage",
    "getItem",
    "storageIndex",
    "litemode",
    "JSON",
    "parse",
    "get",
    "home",
    "saveObject",
    "Date",
    "now",
    "timeObject",
    "homeObject",
    "saveState",
    "set",
    "minHeight",
    "marginTop",
    "embedded",
    "LazySongCard2",
    "lazy",
    "SongCard2",
    "fallback",
    "useStyles",
    "makeStyles",
    "theme",
    "root",
    "flexGrow",
    "paper",
    "padding",
    "spacing",
    "textAlign",
    "palette",
    "text",
    "Discover",
    "classes",
    "API",
    "RecentlyAdded",
    "setLatest",
    "catch",
    "SessionRecommendation",
    "getRecommendations",
    "recommendations",
    "slice",
    "discover",
    "latest",
    "marginBottom",
    "Divider",
    "Container",
    "ListItemText",
    "Grid",
    "container",
    "i",
    "Preloader",
    "item",
    "xs",
    "sm",
    "onPlay",
    "List",
    "ListItem",
    "selected",
    "button",
    "ListItemSecondaryAction",
    "IconButton",
    "OpenInNew",
    "Typography"
  ],
  "mappings": "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",
  "file": "static/js/1.75266dc8.chunk.js",
  "sourcesContent": [
    "import React from \"react\";\nimport \"./SongCard.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport {IconButton, Typography} from \"@material-ui/core\";\n// import Grow from \"@material-ui/core/Grow\";\n// import {FocusNode} from \"@please/lrud\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport PropTypes from \"prop-types\";\nimport {QueueMusic} from \"@material-ui/icons\";\n\nconst SongCard = ({song, ...props}) => (\n\t<>\n\t\t{/*<Grow in={true}>*/}\n\t\t<Card className={\"SongCard\"} disableRipple style={{width: \"18rem\", backgroundColor: \"transparent\"}}\n\t\t\t  elevation={0}\n\t\t\t  {...props}>\n\t\t\t{/*<FocusNode>*/}\n\t\t\t<CardActionArea>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardMedia\n\t\t\t\t\t\tcomponent={\"img\"}\n\t\t\t\t\t\talt={song.snippet.title}\n\t\t\t\t\t\theight=\"140\"\n\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\te.target.onerror = null;\n\t\t\t\t\t\t\te.target.src = \"./assets/icons/darkmode_nothingfound.svg\";\n\t\t\t\t\t\t}}\n\t\t\t\t\t\timage={song.snippet.thumbnails.high.url}\n\t\t\t\t\t\ttitle={song.snippet.title}\n\t\t\t\t\t\tloading={\"lazy\"}\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t\t<div hidden={!props.playlist} style={{\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tbackgroundColor: \"#000000\",\n\t\t\t\t\topacity: \"30%\",\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tdisplay: !props.playlist ? \"none\" : \"block\"\n\t\t\t\t}}/>\n\t\t\t\t<IconButton color={\"#FFFFFF\"} hidden={!props.playlist} style={{\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tbottom: \"0.5rem\",\n\t\t\t\t\tright: \"0.5rem\",\n\t\t\t\t\tdisplay: !props.playlist ? \"none\" : \"block\"\n\t\t\t\t}}>\n\t\t\t\t\t<QueueMusic style={{color: \"#FFF\"}}/>\n\t\t\t\t</IconButton>\n\t\t\t</CardActionArea>\n\t\t\t<CardContent className={\"text-left mb-0 pb-0\"} style={{\n\t\t\t\tmarginLeft: \"-1rem\"\n\t\t\t}}>\n\t\t\t\t<Typography gutterBottom variant=\"h6\" component=\"p\" className={\"text-truncate\"}>\n\t\t\t\t\t<ListItemText\n\t\t\t\t\t\tprimary={<div className={\"text-truncate\"}>{song.snippet.title}</div>}\n\t\t\t\t\t\tsecondary={song.snippet.channelTitle}/>\n\t\t\t\t</Typography>\n\t\t\t</CardContent>\n\t\t\t{/*</FocusNode>*/}\n\t\t</Card>\n\t\t{/*</Grow>*/}\n\t</>\n);\n\nSongCard.propTypes = {\n\tsong: PropTypes.object.isRequired,\n\tonClick: PropTypes.func.isRequired,\n\tplaylist: PropTypes.any\n};\n\nSongCard.defaultProps = {};\n\nexport default React.memo(SongCard);\n",
    "import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z\"\n}), 'QueueMusic');",
    "import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"\n}), 'Done');",
    "import React from \"react\";\nimport {AccountContext, isTvContext, PlayContext} from \"../../Contexts\";\nimport {comLinkWorker as comlinkWorker} from \"../../functions/Worker/worker-export\";\nimport endPoints from \"../../api/EndPoints/EndPoints\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Chip from \"@material-ui/core/Chip\";\nimport {Link} from \"react-router-dom\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport {Done} from \"@material-ui/icons\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport SongCard from \"../SongCard/SongCard\";\nimport Preloader from \"../Preloader/Preloader\";\nimport {get, set} from \"idb-keyval\";\nimport {storageIndex} from \"../../functions/Helper/StorageIndex\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Discover from \"../Discover/Discover\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {useNetwork} from \"../../Hooks\";\nimport \"./home.css\";\nimport {DebugLog} from \"../../functions/Log\";\n\nconst ArtistsSlider = () => {\n    const [state, setState] = React.useState(null);\n    const {token} = React.useContext(AccountContext);\n    React.useEffect(() => {\n        if (token) comlinkWorker.fetch(endPoints.getFeedArtists, {\n            headers: {Authorization: `Bearer ${token}`},\n        }).then(setState);\n    }, [token]);\n    return (\n        <Paper elevation={0} className={\"mb-3 bg-transparent\"} hidden={!state}>\n            {state && state.items ?\n                <div className={\"cardSlider text-left Slider d-block py-2\"} style={{\n                    backgroundColor: \"transparent\",\n                    borderLeft: 0,\n                    borderRadius: 0,\n                    borderRight: 0\n                }}>\n                    {state.items.map((artist, index) =>\n                        <Grow in={true} key={index}>\n                            <Chip\n                                component={Link}\n                                to={\"/artist/\" + artist.id}\n                                avatar={<Avatar>{artist.name.charAt(0)}</Avatar>}\n                                label={artist.name}\n                                clickable\n                                className={\"mx-1\"}\n                                deleteIcon={<Done/>}\n                            />\n                        </Grow>)\n                    }\n                </div> : null}\n        </Paper>\n    );\n};\nexport const FeedSection = ({response, showTitle = true}) => {\n    const {PlaySong} = React.useContext(PlayContext);\n    return (\n        <React.Fragment>\n            {response && response?.items.length ?\n                <React.Fragment>\n                    <Grow in={true}>\n                        <Typography hidden={!showTitle} variant={\"h5\"} className={\"pl-3 text-left text-truncate\"}>\n                            {response.title}\n                        </Typography>\n                    </Grow>\n                    <Container maxWidth=\"xl\" className={\"px-0 mx-0 mb-0 pb-0\"}>\n                        <div className={\"cardSlider Slider\"}>\n                            {response.items.map((video, index) => <SongCard key={index}\n                                                                            song={video}\n                                                                            onClick={() => PlaySong({\n                                                                                useProxy: true,\n                                                                                song: video,\n                                                                                playList: {\n                                                                                    list: response,\n                                                                                    index: index\n                                                                                }\n                                                                            })}/>\n                            )}\n                        </div>\n                    </Container>\n                </React.Fragment> : null}\n        </React.Fragment>\n    );\n};\nconst ErrorComponent = (error) => (\n    <div hidden={error} className=\"Preloader text-center\" style={{\n        width: \"10rem\",\n        height: \"10rem\",\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\"\n    }}>\n        <img src={\"./assets/icons/darkmode_nothingfound.svg\"}\n             style={{width: \"8rem\", height: \"auto\"}}\n             alt={\"Yebr Music Logo\"}/>\n\n    </div>\n);\nconst getTopArtistFromAPI = (e) => comlinkWorker.fetch(endPoints.Recommendations.topArtist, {\n    headers: ({Authorization: `Bearer ${e}`})\n}) || null //.then(a => a.status === 200 ? a.json() : null);\nconst getSearchFeedFromAPI = (e) => comlinkWorker.fetch(endPoints.Recommendations.topSearched, {\n    headers: ({Authorization: `Bearer ${e}`})\n}) || null //.then(a => a.status === 200 ? a.json() : null);\n\nconst HomeComponent = () => {\n    const tv = React.useContext(isTvContext);\n    const [state, setState] = React.useState([]);\n    const [error, setError] = React.useState(false);\n    const {token} = React.useContext(AccountContext);\n    const online = useNetwork();\n\n    const loadSections = async (t) => {\n        try {\n            getTopArtistFromAPI(t).then(response => setState(state => [...state, response]));\n            getSearchFeedFromAPI(t).then(response => setState(state => [...state, response]));\n        } catch (e) {\n            setError(!error);\n            DebugLog(e);\n        }\n    };\n    const init = async () => {\n        if (localStorage.getItem(storageIndex.litemode) && !JSON.parse(localStorage.getItem(storageIndex.litemode))) return await loadSections(token);\n        if (!await get(storageIndex.home.saveObject) || !(Date.now() - await get(storageIndex.home.timeObject)) / (100 * 60) > 1) return await loadSections(token);\n        else {\n            const homeObject = await get(storageIndex.home.saveObject);\n            return setState(homeObject); // SetState From IndexedDB\n        }\n    };\n\n    const saveState = async () => {\n        if (state && state.length) {\n            await set(storageIndex.home.timeObject, Date.now());\n            await set(storageIndex.home.saveObject, state);\n        }\n    };\n    React.useEffect(() => {\n        saveState();\n    }, [state]);\n    React.useEffect(() => {\n        init();\n    }, []);\n\n    return (\n        <div className=\"home mb-5\" style={{minHeight: \"70vh\"}}>\n            <div style={{marginTop: tv ? \"1rem\" : \"5rem\"}}>\n                <ArtistsSlider/>\n            </div>\n\n            {(state && state.length) ? (\n                state.map((response, index) => <FeedSection key={index} response={response}/>)\n            ) : !error ? <Preloader/> : null}\n\n            <div className={\"mb-3\"}>\n                {!error ?\n                    <div hidden={!online || error}>\n                        <Divider/>\n                        <React.Fragment>\n                            <Grow in={true}>\n                                <Typography variant={\"h5\"} className={\"mb-3 mt-2 pl-3 text-left text-truncate\"}>\n                                    Explore\n                                </Typography>\n                            </Grow>\n                            <Discover embedded={true} items={10}/>\n                        </React.Fragment>\n                    </div> : null\n                }\n            </div>\n            <ErrorComponent error={error}/>\n            <ErrorComponent error={!online}/>\n        </div>\n    );\n};\nexport default React.memo(HomeComponent);\n",
    "import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"\n}), 'OpenInNew');",
    "import React, {lazy, Suspense} from \"react\";\n\nconst LazySongCard2 = lazy(() => import(\"./SongCard2\"));\n\nconst SongCard2 = props => (\n    <Suspense fallback={null}>\n        <LazySongCard2 {...props} />\n    </Suspense>\n);\n\nexport default SongCard2;\n",
    "import React, {useContext} from \"react\";\nimport \"./Discover.css\";\nimport SongCard2 from \"../SongCard2/SongCard2.lazy\";\nimport {Container, Divider, IconButton, ListItemSecondaryAction} from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport {AccountContext, isTvContext, PlayContext} from \"../../Contexts\";\nimport PropTypes from \"prop-types\";\nimport SongCard from \"../SongCard/SongCard\";\nimport Preloader from \"../Preloader/Preloader\";\nimport {get, set} from \"idb-keyval\";\nimport {storageIndex} from \"../../functions/Helper/StorageIndex\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport {Link} from \"react-router-dom\";\nimport {OpenInNew} from \"@material-ui/icons\";\nimport SessionRecommendation from \"../../functions/SessionRecommendation\";\nimport {useNetwork} from \"../../Hooks\";\nimport {FeedSection} from \"../Home/home\";\nimport {comLinkWorker as comlinkWorker} from \"../../functions/Worker/worker-export\";\nimport endPoints from \"../../api/EndPoints/EndPoints\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: \"center\",\n        color: theme.palette.text.secondary,\n    },\n}));\n/***\n * User Uploaded Content One Way\n * Get User Video and upload it to your unlisted youtube playlist\n * When Recommending Get videos from that Playlist\n * Show Recently Uploaded mixed with Real Artists\n ***/\nconst Discover = (props) => {\n    const classes = useStyles();\n    const [state, setState] = React.useState(null);\n    const [error, setError] = React.useState(false);\n    const online = useNetwork();\n    const {token} = useContext(AccountContext);\n\n    React.useEffect(() => {\n        const a = async () => {\n            try {\n                // !await get(storageIndex.discover.saveObject) || !(Date.now() - await get(storageIndex.discover.timeObject)) / (100 * 60) > 1\n                if (online) {\n                    if (!props.embedded) comlinkWorker.fetch(endPoints.API.RecentlyAdded, {\n                        headers: ({Authorization: `Bearer ${token}`}),\n                    }).then(setLatest).catch();\n\n                    const recommendations = await SessionRecommendation.getRecommendations(token);\n                    setState({\n                        ...recommendations,\n                        items: props.embedded ? recommendations.items.slice(0, props.items || 15) : recommendations.items\n                    });\n                    await set(storageIndex.discover.timeObject, Date.now());\n                    await set(storageIndex.discover.saveObject, recommendations);\n                } else {\n                    const homeObject = await get(storageIndex.discover.saveObject);\n                    setState({\n                        ...homeObject,\n                        items: props.embedded ? homeObject.items.slice(0, props.items || 15) : homeObject.items\n                    });\n                }\n            } catch (e) {\n                setError(!error);\n            }\n        };\n        a();\n    }, []);\n    // React.useEffect(() => {\n    //     const a = async () => {\n    //         if (!state) return;\n    //         const saved = await get(storageIndex.discover.saveObject);\n    //         if (!saved || saved.etag !== state.etag) {\n    //             await set(storageIndex.discover.timeObject, Date.now());\n    //             await set(storageIndex.discover.saveObject, state);\n    //         }\n    //     };\n    //     a();\n    // }, [state]);\n    const tv = React.useContext(isTvContext);\n    const {PlaySong} = React.useContext(PlayContext);\n    const [latest, setLatest] = React.useState(null);\n\n\n    return (\n        <div className=\"Discover\" style={{\n            marginTop: props.embedded ? 0 : \"5rem\",\n            marginBottom: props.embedded ? 0 : \"3rem\"\n        }}>\n            <div>\n                {\n                    props.embedded ? null : latest ? <FeedSection response={latest}/> : null\n                }\n            </div>\n            <Divider hidden={props.embedded}/>\n            <Container className={\"mt-2\"}>\n                {\n                    props.embedded ? null : <div hidden={error}>\n                        <ListItemText primary={\"Discover\"} secondary={\"Recommended for you\"}/>\n                        <br/>\n                    </div>\n                }\n\n                <div className={classes.root}>\n                    {\n                        !tv ? <Grid container spacing={2}>\n                            {\n                                state ? state.items.map((video, i) => <Grid key={i} item xs={6} sm={2}>\n                                    <SongCard2 onPlay={() => PlaySong({\n                                        useProxy: true,\n                                        song: video,\n                                        playList: {\n                                            list: state,\n                                            index: i\n                                        }\n                                    })} video={video}/>\n                                </Grid>) : !error ? <Preloader/> : null\n                            }\n                        </Grid> : <Grid container spacing={2}>\n                            {\n                                state ? state.items.map((video, i) => <div key={i} className={\"mb-2\"}><SongCard\n                                    onClick={() => PlaySong({\n                                        useProxy: true,\n                                        song: video,\n                                        playList: {\n                                            list: state,\n                                            index: i\n                                        }\n                                    })} song={video}/></div>) : !error ? <Preloader/> : null\n                            }\n                        </Grid>\n                    }\n                </div>\n                {\n                    props.embedded ? <List hidden={error}>\n                        <ListItem selected={true} button component={Link} to={\"/discover\"}>\n                            <ListItemText primary=\"Explore More\" secondary={\"Find More Recommendations\"}/>\n                            <ListItemSecondaryAction>\n                                <IconButton><OpenInNew/></IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    </List> : null\n                }\n                {error ? <div hidden>\n                    <Typography variant={\"button\"}>Failed to Load</Typography>\n                    <div className=\"Preloader text-center\" style={{\n                        width: \"10rem\",\n                        height: \"10rem\",\n                        position: \"absolute\",\n                        display: \"none\",\n                        top: \"50%\",\n                        left: \"50%\",\n                        transform: \"translate(-50%, -50%)\"\n                    }}>\n                        <img src={\"./assets/icons/darkmode_nothingfound.svg\"} style={{width: \"8rem\", height: \"auto\"}}\n                             alt={\"Yebr Music Logo\"}/>\n\n                    </div>\n                </div> : null}\n            </Container>\n        </div>\n    );\n};\n\nDiscover.propTypes = {\n    embedded: PropTypes.bool,\n    items: PropTypes.number\n};\n\nDiscover.defaultProps = {};\n\nexport default React.memo(Discover);\n"
  ],
  "sourceRoot": ""
}
